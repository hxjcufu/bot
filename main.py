import telebot
from telebot import types

TOKEN = 'YOUR_BOT_TOKEN_HERE'
OWNER_ID = 2106708967
ADMIN_IDS = [OWNER_ID, 7841720739]

bot = telebot.TeleBot(TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º—ã –∂–∞–ª–æ–±—ã
user_states = {}
complaints = {}
complaint_id_counter = 1

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ (4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
def main_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    buttons = [
        types.InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="complaint_start"),
        types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_complaints"),
        types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="viewed_complaints"),
        types.InlineKeyboardButton("üìû –ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="call_admin"),
    ]
    keyboard.add(*buttons)
    return keyboard

# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é (—Ç–æ–∂–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö)
def admin_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    buttons = [
        types.InlineKeyboardButton("üì© –í—Å–µ –∂–∞–ª–æ–±—ã", callback_data="all_complaints"),
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_complaint"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_complaint"),
        types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="clear_complaints"),
        types.InlineKeyboardButton("üîï –¢–∏—Ö–∏–π –∞–¥–º–∏–Ω", callback_data="silent_admin"),
        types.InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data="remind_admin"),
        types.InlineKeyboardButton("üîé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
    ]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    text = f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n–≠—Ç–æ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é üëá"
    if user_id in ADMIN_IDS:
        bot.send_message(user_id, text, reply_markup=admin_menu_keyboard())
    else:
        bot.send_message(user_id, text, reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ –∫–Ω–æ–ø–∫–∞–º
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    data = call.data

    if data == "complaint_start":
        user_states[user_id] = {"step": 1, "data": {}}
        bot.send_message(user_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–∏–ª–∏ ID):")
        bot.answer_callback_query(call.id)
        return

    if user_id in user_states:
        state = user_states[user_id]
        if state["step"] == 1:
            state["data"]["complainant"] = call.message.text if call.message else ""
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ callback ‚Äî –∂–¥—ë–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        bot.answer_callback_query(call.id)
        return

    if data == "my_complaints":
        # TODO: –ø–æ–∫–∞–∑–∞—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–π—á–∞—Å –ø—É—Å—Ç–æ)
        bot.send_message(user_id, "üìã –í–∞—à–∏—Ö –∂–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç.")
        bot.answer_callback_query(call.id)
        return

    if data == "viewed_complaints":
        # TODO: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã (–ø—É—Å—Ç–æ)
        bot.send_message(user_id, "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–± –Ω–µ—Ç.")
        bot.answer_callback_query(call.id)
        return

    if data == "call_admin":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –ø—Ä–æ—Å–∏—Ç –∞–¥–º–∏–Ω–∞.")
        bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω–∞ –≤—ã–∑–≤–∞–ª–∏, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        bot.answer_callback_query(call.id)
        return

    if user_id in ADMIN_IDS:
        if data == "all_complaints":
            bot.send_message(user_id, "üì© –í—Å–µ –∂–∞–ª–æ–±—ã (–ø–æ–∫–∞ –ø—É—Å—Ç–æ).")
            bot.answer_callback_query(call.id)
            return
        elif data == "confirm_complaint":
            bot.send_message(user_id, "‚úÖ –ñ–∞–ª–æ–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
bot.answer_callback_query(call.id)
            return
        elif data == "reject_complaint":
            bot.send_message(user_id, "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
            bot.answer_callback_query(call.id)
            return
        elif data == "clear_complaints":
            bot.send_message(user_id, "üóë –ó–∞—è–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
            bot.answer_callback_query(call.id)
            return
        elif data == "silent_admin":
            bot.send_message(user_id, "üîï –†–µ–∂–∏–º —Ç–∏—Ö–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤–∫–ª—é—á—ë–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
            bot.answer_callback_query(call.id)
            return
        elif data == "remind_admin":
            bot.send_message(user_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
            bot.answer_callback_query(call.id)
            return
        elif data == "stats":
            bot.send_message(user_id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
            bot.answer_callback_query(call.id)
            return

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    text = message.text.strip()
    if user_id in user_states:
        state = user_states[user_id]
        step = state["step"]

        if step == 1:
            state["data"]["complainant"] = text
            state["step"] = 2
            bot.send_message(user_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:")
            return
        elif step == 2:
            state["data"]["violator_id"] = text
            state["step"] = 3
            bot.send_message(user_id, "üìÑ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:")
            return
        elif step == 3:
            state["data"]["problem_desc"] = text
            state["step"] = 4
            bot.send_message(user_id, "‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±—ã (–¥–∞/–Ω–µ—Ç):")
            return
        elif step == 4:
            if text.lower() == "–¥–∞":
                global complaint_id_counter
                complaint_id = complaint_id_counter
                complaint_id_counter += 1

                complaints[complaint_id] = state["data"]
                bot.send_message(user_id, f"‚úÖ –ñ–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
                # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤
                for admin_id in ADMIN_IDS:
                    bot.send_message(admin_id,
                                     f"–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ #{complaint_id}:\n"
                                     f"–ñ–∞–ª–æ–±—â–∏–∫: {state['data']['complainant']}\n"
                                     f"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å ID: {state['data']['violator_id']}\n"
                                     f"–ü—Ä–æ–±–ª–µ–º–∞: {state['data']['problem_desc']}")
                user_states.pop(user_id)
            else:
                bot.send_message(user_id, "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                user_states.pop(user_id)
            return
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

bot.infinity_polling()# --- –ß–∞—Å—Ç—å 2: –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–± ---

from telebot import types

# –ó–¥–µ—Å—å complaints, user_states, ADMIN_IDS –∏ complaint_id_counter ‚Äî –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –¥–µ–ª–∏—à—å –ø–æ —Ñ–∞–π–ª–∞–º)

def get_complaint_summary(complaint_id, data):
    return (f"üîî –ñ–∞–ª–æ–±–∞ #{complaint_id}:\n"
            f"–ñ–∞–ª–æ–±—â–∏–∫: {data['complainant']}\n"
            f"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å ID: {data['violator_id']}\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {data['problem_desc']}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É
def show_all_complaints(chat_id):
    if not complaints:
        bot.send_message(chat_id, "üì≠ –ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for cid, data in complaints.items():
        text = get_complaint_summary(cid, data)
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{cid}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{cid}"),
        )
        bot.send_message(chat_id, text, reply_markup=keyboard)
# –û—á–∏—Å—Ç–∫–∞ –∂–∞–ª–æ–±
def clear_complaints(chat_id):
    complaints.clear()
    bot.send_message(chat_id, "üóë –í—Å–µ –∂–∞–ª–æ–±—ã –æ—á–∏—â–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.from_user.id in ADMIN_IDS and call.data.startswith(("confirm_", "reject_")))
def admin_handle_complaint_decision(call):
    action, cid_str = call.data.split("_")
    cid = int(cid_str)

    if cid not in complaints:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if action == "confirm":
        bot.send_message(call.from_user.id, f"‚úÖ –ñ–∞–ª–æ–±–∞ #{cid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –∏ —Ç.–¥.
        del complaints[cid]
    elif action == "reject":
        bot.send_message(call.from_user.id, f"‚ùå –ñ–∞–ª–æ–±–∞ #{cid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        del complaints[cid]

    bot.answer_callback_query(call.id)
    # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –∂–∞–ª–æ–± –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    show_all_complaints(call.from_user.id)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤—ã—Ö –∂–∞–ª–æ–±–∞—Ö (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
def remind_admins():
    if complaints:
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"üîî –£ –≤–∞—Å {len(complaints)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±!")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–ª–æ–±–∞–º
def send_stats(chat_id):
    total = len(complaints)
    bot.send_message(chat_id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±: {total}")

# –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
def admin_menu_keyboard_v2():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton("üì© –í—Å–µ –∂–∞–ª–æ–±—ã", callback_data="all_complaints"),
        types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∂–∞–ª–æ–±—ã", callback_data="clear_complaints"),
        types.InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞–º", callback_data="remind_admin"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
    ]
    keyboard.add(*buttons)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.from_user.id in ADMIN_IDS)
def admin_callback_handler(call):
    data = call.data
    user_id = call.from_user.id

    if data == "all_complaints":
        show_all_complaints(user_id)
    elif data == "clear_complaints":
        clear_complaints(user_id)
    elif data == "remind_admin":
        remind_admins()
        bot.send_message(user_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    elif data == "stats":
        send_stats(user_id)
    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    bot.answer_callback_query(call.id)# --- –ß–∞—Å—Ç—å 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è) –∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

# –°—Ç–µ–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
user_states = {}  # user_id : {"step": int, "data": dict}

# –ó–∞–ø—É—Å–∫ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
@bot.message_handler(commands=['sendcomplaint'])
def start_complaint(message):
    user_id = message.from_user.id
    user_states[user_id] = {"step": 1, "data": {}}
    bot.send_message(user_id, "üìù –®–∞–≥ 1/10: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –∏–º—è:")

@bot.message_handler(func=lambda m: m.from_user.id in user_states)
def complaint_steps(message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if not state:
        return

    step = state["step"]
    text = message.text.strip()

    if step == 1:
        state["data"]["complainant"] = text
        state["step"] = 2
        bot.send_message(user_id, "üìù –®–∞–≥ 2/10: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID:")
    elif step == 2:
        state["data"]["complainant_id"] = text
        state["step"] = 3
        bot.send_message(user_id, "üìù –®–∞–≥ 3/10: –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:")
    elif step == 3:
        state["data"]["violator"] = text
        state["step"] = 4
        bot.send_message(user_id, "üìù –®–∞–≥ 4/10: –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:")
elif step == 4:
        state["data"]["violator_id"] = text
        state["step"] = 5
        bot.send_message(user_id, "üìù –®–∞–≥ 5/10: –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–∫—Ä–∞—Ç–∫–æ):")
    elif step == 5:
        state["data"]["problem_desc"] = text
        state["step"] = 6
        bot.send_message(user_id, "üìù –®–∞–≥ 6/10: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—Ä—É—à–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    elif step == 6:
        state["data"]["violation_date"] = text
        state["step"] = 7
        bot.send_message(user_id, "üìù –®–∞–≥ 7/10: –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    elif step == 7:
        state["data"]["additional_info"] = text
        state["step"] = 8
        bot.send_message(user_id, "üìù –®–∞–≥ 8/10: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    elif step == 8:
        state["data"]["evidence_link"] = text
        state["step"] = 9
        bot.send_message(user_id, "üìù –®–∞–≥ 9/10: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞ (–¥–∞/–Ω–µ—Ç):")
    elif step == 9:
        if text.lower() == "–¥–∞":
            state["step"] = 10
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...")
            save_complaint(user_id, state["data"])
            user_states.pop(user_id)
        elif text.lower() == "–Ω–µ—Ç":
            bot.send_message(user_id, "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sendcomplaint")
            user_states.pop(user_id)
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
    else:
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /sendcomplaint")
        user_states.pop(user_id)

def save_complaint(user_id, data):
    global complaint_id_counter
    complaint_id_counter += 1
    complaints[complaint_id_counter] = data
    bot.send_message(user_id, f"üÜó –ñ–∞–ª–æ–±–∞ ‚Ññ{complaint_id_counter} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"üîî –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ ‚Ññ{complaint_id_counter} –æ—Ç {data['complainant']}")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
def user_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="user_send_complaint"),
        types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="user_my_complaints"),
        types.InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="user_viewed_complaints"),
        types.InlineKeyboardButton("üÜò –ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="user_call_admin"),
        types.InlineKeyboardButton("üìÑ –ü–æ–º–æ—â—å", callback_data="user_help"),
    ]
    keyboard.add(*buttons)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback
@bot.callback_query_handler(func=lambda call: call.data.startswith("user_"))
def user_callback_handler(call):
    user_id = call.from_user.id
    data = call.data

    if data == "user_send_complaint":
        bot.send_message(user_id, "üìù –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∂–∞–ª–æ–±—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendcomplaint")
    elif data == "user_my_complaints":
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥–ª—É—à–∫–∏
        bot.send_message(user_id, "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")
    elif data == "user_viewed_complaints":
        bot.send_message(user_id, "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")
    elif data == "user_call_admin":
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –ø–æ–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å!")
        bot.send_message(user_id, "üÜò –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    elif data == "user_help":
        bot.send_message(user_id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /sendcomplaint")
    else:
        bot.send_message(user_id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    bot.answer_callback_query(call.id)# --- –ß–∞—Å—Ç—å 4: –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ ---
# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å 14+ –∫–Ω–æ–ø–∫–∞–º–∏
def admin_panel_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton("üìã –í—Å–µ –∂–∞–ª–æ–±—ã", callback_data="admin_all_complaints"),
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="admin_confirm_complaint"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="admin_reject_complaint"),
        types.InlineKeyboardButton("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user"),
        types.InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unblock_user"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_clear_all"),
        types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications"),
        types.InlineKeyboardButton("üõ†Ô∏è –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º", callback_data="admin_silent_mode"),
        types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", callback_data="admin_blocked_list"),
        types.InlineKeyboardButton("üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_list"),
        types.InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_message"),
        types.InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±—ã", callback_data="admin_view_complaint"),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back"),
    ]
    keyboard.add(*buttons)
    return keyboard

# –ê–¥–º–∏–Ω callback handler
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def admin_callback_handler(call):
    user_id = call.from_user.id
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚ùó –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    data = call.data

    if data == "admin_all_complaints":
        if not complaints:
            bot.send_message(user_id, "üì≠ –ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "üìã –í—Å–µ –∂–∞–ª–æ–±—ã:\n"
            for cid, comp in complaints.items():
                text += f"#{cid} –æ—Ç {comp['complainant']} ‚Äî {comp['problem_desc']}\n"
            bot.send_message(user_id, text)

    elif data == "admin_confirm_complaint":
        bot.send_message(user_id, "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –∂–∞–ª–æ–±—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–æ–ø–∏—à–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    elif data == "admin_reject_complaint":
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ ID –∂–∞–ª–æ–±—ã –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–æ–ø–∏—à–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    elif data == "admin_block_user":
        bot.send_message(user_id, "üîí –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

    elif data == "admin_unblock_user":
        bot.send_message(user_id, "üîì –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

    elif data == "admin_stats":
        total = len(complaints)
        blocked = len(blocked_users)
        bot.send_message(user_id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –∂–∞–ª–æ–±: {total}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked}")

    elif data == "admin_clear_all":
        complaints.clear()
        bot.send_message(user_id, "üßπ –í—Å–µ –∂–∞–ª–æ–±—ã –æ—á–∏—â–µ–Ω—ã.")

    elif data == "admin_notifications":
        bot.send_message(user_id, "üîî –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")

    elif data == "admin_silent_mode":
        bot.send_message(user_id, "üõ†Ô∏è –†–µ–∂–∏–º '–¢–∏—Ö–∏–π –∞–¥–º–∏–Ω' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")

    elif data == "admin_blocked_list":
        if not blocked_users:
            bot.send_message(user_id, "üë• –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            text = "üë• –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(str(uid) for uid in blocked_users)
            bot.send_message(user_id, text)

    elif data == "admin_users_list":
        bot.send_message(user_id, "üë®‚Äçüíª –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    elif data == "admin_send_message":
        bot.send_message(user_id, "üì® –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")

    elif data == "admin_view_complaint":
        bot.send_message(user_id, "üïµÔ∏è‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∂–∞–ª–æ–±—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
elif data == "admin_back":
        bot.send_message(user_id, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_panel_keyboard())

    else:
        bot.send_message(user_id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    bot.answer_callback_query(call.id)# === –ß–∞—Å—Ç—å 5 ===

from telebot import types

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
def user_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="send_report"),
        types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_reports"),
        types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="viewed_reports"),
        types.InlineKeyboardButton("üìû –ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="call_admin"),
        types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
        # –î–æ–±–∞–≤—å —Å—é–¥–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ]
    keyboard.add(*buttons)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data in ["send_report", "my_reports", "viewed_reports", "call_admin", "main_menu"])
def handle_user_menu(call):
    user_id = call.from_user.id
    if call.data == "send_report":
        bot.send_message(user_id, "‚úçÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã. –ù–∞–ø–∏—à–∏—Ç–µ ID –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:")
        user_states[user_id] = {"step": 1, "complaint": {}}
    elif call.data == "my_reports":
        reports = user_reports.get(user_id, [])
        if not reports:
            bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        else:
            text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join([f"#{i+1} - {r['status']}" for i, r in enumerate(reports)])
            bot.send_message(user_id, text)
    elif call.data == "viewed_reports":
        bot.send_message(user_id, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    elif call.data == "call_admin":
        bot.send_message(user_id, "–ê–¥–º–∏–Ω —É–∂–µ –≤ –ø—É—Ç–∏! üèÉ‚Äç‚ôÇÔ∏è")
        bot.send_message(OWNER_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} ({user_id}) –ø–æ–∑–≤–∞–ª –∞–¥–º–∏–Ω–∞.")
    elif call.data == "main_menu":
        bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=user_menu_keyboard())
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∂–∞–ª–æ–±—ã –ø–æ 10 —à–∞–≥–∞–º
@bot.message_handler(func=lambda m: m.from_user.id in user_states)
def handle_complaint_steps(message):
    user_id = message.from_user.id
    state = user_states[user_id]
    step = state["step"]
    complaint = state["complaint"]

    if step == 1:
        complaint["–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å_ID"] = message.text.strip()
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:")
        state["step"] = 2
    elif step == 2:
        complaint["–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å_–Ω–∏–∫"] = message.text.strip()
        bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:")
        state["step"] = 3
    elif step == 3:
        complaint["–ø—Ä–∏—á–∏–Ω–∞"] = message.text.strip()
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID:")
        state["step"] = 4
    elif step == 4:
        complaint["–∂–∞–ª–æ–±—â–∏–∫_ID"] = message.text.strip()
        bot.send_message(user_id, "–í–∞—à –Ω–∏–∫–Ω–µ–π–º:")
        state["step"] = 5
    elif step == 5:
        complaint["–∂–∞–ª–æ–±—â–∏–∫_–Ω–∏–∫"] = message.text.strip()
        bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
        state["step"] = 6
    elif step == 6:
        if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            complaint["—Å–∫—Ä–∏–Ω—à–æ—Ç—ã"] = None
            bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±—ã (–¥–∞/–Ω–µ—Ç):")
            state["step"] = 10
        elif message.photo:
            complaint["—Å–∫—Ä–∏–Ω—à–æ—Ç—ã"] = message.photo[-1].file_id
            bot.send_message(user_id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±—ã (–¥–∞/–Ω–µ—Ç):")
            state["step"] = 10
else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    elif step == 10:
        answer = message.text.lower()
        if answer == "–¥–∞":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É
            user_reports.setdefault(user_id, []).append({**complaint, "status": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_text = (
                f"–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç {complaint['–∂–∞–ª–æ–±—â–∏–∫_–Ω–∏–∫']} (ID: {complaint['–∂–∞–ª–æ–±—â–∏–∫_ID']})\n"
                f"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å: {complaint['–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å_–Ω–∏–∫']} (ID: {complaint['–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å_ID']})\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {complaint['–ø—Ä–∏—á–∏–Ω–∞']}"
            )
            bot.send_message(OWNER_ID, admin_text)
            if complaint["—Å–∫—Ä–∏–Ω—à–æ—Ç—ã"]:
                bot.send_photo(OWNER_ID, complaint["—Å–∫—Ä–∏–Ω—à–æ—Ç—ã"])
            del user_states[user_id]
        elif answer == "–Ω–µ—Ç":
            bot.send_message(user_id, "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del user_states[user_id]
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
    else:
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        del user_states[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
